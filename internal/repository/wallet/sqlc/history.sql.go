// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: history.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createTransfer = `-- name: CreateTransfer :exec
INSERT INTO history (id, amount, from_wallet, to_wallet)
VALUES ($1, $2, $3, $4)
`

type CreateTransferParams struct {
	ID         uuid.UUID
	Amount     float64
	FromWallet uuid.UUID
	ToWallet   uuid.UUID
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) error {
	_, err := q.db.ExecContext(ctx, createTransfer,
		arg.ID,
		arg.Amount,
		arg.FromWallet,
		arg.ToWallet,
	)
	return err
}

const getHistory = `-- name: GetHistory :many
SELECT id, amount, from_wallet, to_wallet, time FROM history
WHERE from_wallet = $1 OR to_wallet = $1
`

func (q *Queries) GetHistory(ctx context.Context, fromWallet uuid.UUID) ([]History, error) {
	rows, err := q.db.QueryContext(ctx, getHistory, fromWallet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []History
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.FromWallet,
			&i.ToWallet,
			&i.Time,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
